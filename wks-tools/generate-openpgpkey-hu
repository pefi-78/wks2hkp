#!/usr/bin/env python
#
# Copyright (C) 2016 by Intevation GmbH
# Authors:
# Thomas Arendsen Hein <thomas@intevation.de>
# Andre Heinecke <aheinecke@intevation.de>
#
# This program is free software under the GPL (>=v2)
# Read the file COPYING coming with the software for details.

"""
generate-openpgpkey-hu

Generate contents of /.well-known/openpgpkey/hu/ for OpenPGP Web Key Service
"""

import hashlib
import sys
import os.path
import errno
import shutil
import pyme.core, pyme.constants.protocol, pyme.errors
import tempfile
import stat

class KeyringError(Exception):
    """Problem in the keyring"""
    pass

def export_key(context, key):
    """Return exported key data"""
    data = pyme.core.Data()
    context.op_export(key.subkeys[0].fpr, 0, data)
    data.seek(0, 0)
    return data.read()

def zb32_encode(data):
    """Return data in zbase 32 encoding.

    Data must be convertible to a bytearray.

    Implementation is derived from GnuPG's common/zb32.c
    as published in gnupg-2.1.15.
    """
    zb32asc = "ybndrfg8ejkmcpqxot1uwisza345h769"

    data = bytearray(data)
    databits = len(data) * 8
    datalen = (databits + 7) / 8

    output = ""

    while datalen >= 5:
        output += zb32asc[((data[0]      ) >> 3)                  ]
        output += zb32asc[((data[0] &   7) << 2) | (data[1] >> 6) ]
        output += zb32asc[((data[1] &  63) >> 1)                  ]
        output += zb32asc[((data[1] &   1) << 4) | (data[2] >> 4) ]
        output += zb32asc[((data[2] &  15) << 1) | (data[3] >> 7) ]
        output += zb32asc[((data[3] & 127) >> 2)                  ]
        output += zb32asc[((data[3] &   3) << 3) | (data[4] >> 5) ]
        output += zb32asc[((data[4] &  31)     )                  ]
        data = data[5:]
        datalen -= 5

    if datalen == 4:
        output += zb32asc[((data[0]      ) >> 3)                  ]
        output += zb32asc[((data[0] &   7) << 2) | (data[1] >> 6) ]
        output += zb32asc[((data[1] &  63) >> 1)                  ]
        output += zb32asc[((data[1] &   1) << 4) | (data[2] >> 4) ]
        output += zb32asc[((data[2] &  15) << 1) | (data[3] >> 7) ]
        output += zb32asc[((data[3] & 127) >> 2)                  ]
        output += zb32asc[((data[3] &   3) << 3)                  ]
    elif datalen == 3:
        output += zb32asc[((data[0]      ) >> 3)                  ]
        output += zb32asc[((data[0] &   7) << 2) | (data[1] >> 6) ]
        output += zb32asc[((data[1] &  63) >> 1)                  ]
        output += zb32asc[((data[1] &   1) << 4) | (data[2] >> 4) ]
        output += zb32asc[((data[2] &  15) << 1)                  ]
    elif datalen == 2:
        output += zb32asc[((data[0]      ) >> 3)                  ]
        output += zb32asc[((data[0] &   7) << 2) | (data[1] >> 6) ]
        output += zb32asc[((data[1] &  63) >> 1)                  ]
        output += zb32asc[((data[1] &   1) << 4)                  ]
    elif datalen == 1:
        output += zb32asc[((data[0]      ) >> 3)                  ]
        output += zb32asc[((data[0] &   7) << 2)                  ]

    # Need to strip some bytes if not a multiple of 40.
    output = output[:(databits + 5 - 1) / 5]
    return output

def populate_hudir(keylist, directory):
    """Export keys into OpenPGP Web Key Service hu directory"""
    # separate Context for exporting, otherwise "GPGME: Invalid value (7,55)"
    # happens on the next op_keylist_all after the first op_export:
    context = pyme.core.Context()
    context.set_protocol(pyme.constants.protocol.OpenPGP)
    context.set_armor(0)

    for key, localparts in keylist:
        keydata = export_key(context, key)
        for localpart in localparts:
            zbase32 = zb32_encode(hashlib.sha1(localpart).digest())
            filename = os.path.join(directory, zbase32)
            keyfile = open(filename, 'wb')
            keyfile.write(keydata)
            keyfile.close()

def keys_localparts(domain):
    """Yield all OpenPGP keys with localparts of a single domain"""
    context = pyme.core.Context()
    context.set_protocol(pyme.constants.protocol.OpenPGP)

    dupcheck = {}
    for key in context.op_keylist_all("@" + domain, False):
        if key.revoked or key.expired or key.disabled:
            continue
        emails = [uid.email.lower().rsplit('@', 1)
                  for uid in key.uids
                  if not uid.invalid and not uid.revoked]
        localparts = set([localpart
                          for localpart, dom in emails
                          if dom == domain])
        if localparts:
            for localpart in localparts:
                existing = dupcheck.get(localpart)
                if existing:
                    raise KeyringError(
                        "duplicate entry for '%s' in keys %s and %s"
                        % (localpart,
                           existing.subkeys[0].fpr,
                           key.subkeys[0].fpr))
                dupcheck[localpart] = key
            yield (key, localparts)
    if not dupcheck:
        raise KeyringError(
            "no keys found for domain '%s'" % domain)

def main(domain, hudir, keyring=None):
    """Create and fill hu directory for OpenPGP Web Key Service"""
    pyme.core.check_version(None) # init gpgme

    hudir_old = '%s.old' % hudir
    hudir_tmp = '%s.tmp' % hudir

    cleanup_dirs = []

    try:
        if keyring:
            if not os.path.exists(keyring):
                raise KeyringError(
                    "keyring '%s' not found" % keyring)
            tmpdir = tempfile.mkdtemp("-hugen")
            filename = os.path.join(tmpdir, "my-gpg")
            gpgfile = open(filename, 'w')
            for engine in pyme.core.get_engine_info():
                if engine.protocol == pyme.constants.protocol.OpenPGP:
                    oldgpg = engine.file_name
            gpgfile.write('#!/bin/sh\nexec "%s" --no-default-keyring '
                          '--no-options --keyring "%s" "$@"\n' %
                          (oldgpg, keyring))
            gpgfile.close()
            os.chmod(filename, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)
            pyme.core.set_engine_info(pyme.constants.protocol.OpenPGP, filename)
            cleanup_dirs.append(tmpdir)

        try:
            os.mkdir(hudir_tmp)
            cleanup_dirs.append(hudir_tmp)
        except OSError, inst:
            if inst.errno == errno.EEXIST:
                sys.stderr.write(
                    "error: temporary hu directory '%s' already exists\n"
                    % hudir_tmp)
                sys.exit(1)
            raise
        keylist = keys_localparts(domain)
        populate_hudir(keylist, hudir_tmp)
        if os.path.exists(hudir):
            shutil.rmtree(hudir_old, ignore_errors=True)
            os.rename(hudir, hudir_old)
        os.rename(hudir_tmp, hudir)
        cleanup_dirs.remove(hudir_tmp)
    except (KeyringError, OSError, IOError, pyme.errors.GPGMEError), inst:
        sys.stderr.write("abort: %s\n" % inst)
        sys.exit(1)
    finally:
        for directory in cleanup_dirs:
            try:
                shutil.rmtree(directory)
            except OSError, inst:
                sys.stderr.write(
                    "warning: could not remove '%s': %s\n"
                    % (directory, inst))

if __name__ == "__main__":
    if len(sys.argv) < 3 or len(sys.argv) > 4:
        sys.stdout.write("usage: %s <domain> <output-dir> [keyring]\n"
                         % sys.argv[0])
        sys.exit(1)
    if len(sys.argv) == 4:
        main(sys.argv[1], sys.argv[2], sys.argv[3])
    else:
        main(sys.argv[1], sys.argv[2])

